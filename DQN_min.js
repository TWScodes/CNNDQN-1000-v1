wait(()=>{document.head.appendChild(Object.assign(document.createElement("script"),{src:"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.0.0/dist/tf.min.js"}))})();class DQN{constructor(s,a,cf={}){this.sS=s;this.aS=a;this.lr=cf.learningRate||.001;this.gamma=cf.gamma||.99;this.batchSize=cf.batchSize||64;this.utF=cf.updateTargetFreq||1e3;this.lS=cf.learnStart||1e3;this.mM=cf.maxMemory||1e4;this.temp=cf.temperature||1;this.iLr=cf.initialLearningRate||.001;this.dR=cf.decayRate||.96;this.dS=cf.decaySteps||1e3;this.tempDR=cf.temperatureDecayRate||.999;this.qN=this.bM();this.tN=this.bM();this.tN.setWeights(this.qN.getWeights());this.opt=tf.train.adam(this.iLr);this.lrS=(step)=>this.iLr*Math.pow(this.dR,Math.floor(step/this.dS));this.mem=[];this.steps=0}bM(){const model=tf.sequential();model.add(tf.layers.dense({units:this.units_dense_layer_1||128,inputShape:[this.sS],activation:'relu'}));model.add(tf.layers.batchNormalization());model.add(tf.layers.dense({units:this.units_dense_layer_2||128,activation:'relu'}));model.add(tf.layers.batchNormalization());model.add(tf.layers.dense({units:this.units_dense_layer_3||128,activation:'relu'}));model.add(tf.layers.batchNormalization());model.add(tf.layers.dense({units:this.aS,activation:'linear'}));model.compile({optimizer:this.opt,loss:tf.losses.huberLoss});return model}act(state){const sT=tf.tensor2d([state]);const qV=this.qN.predict(sT);const probs=tf.softmax(qV.div(this.temp)).dataSync();let cP=0;const rN=Math.random();for(let i=0;i<this.aS;i++){cP+=probs[i];if(rN<=cP){sT.dispose();return i}}sT.dispose();return-1}rem(s,a,r,nS,done){this.mem.push({state:s,action:a,reward:r,nextState:nS,done:done});if(this.mem.length>this.mM){this.mem.shift()}}async train(){if(this.mem.length<this.lS)return;const batch=this.sB();const states=batch.map(item=>item.state);const actions=batch.map(item=>item.action);const rewards=batch.map(item=>item.reward);const nStates=batch.map(item=>item.nextState);const dones=batch.map(item=>item.done);const sT=tf.tensor2d(states);const nST=tf.tensor2d(nStates);const qV=this.qN.predict(sT);const nQV=this.tN.predict(nST);const mNQ=nQV.max(-1).dataSync();const tQV=qV.clone();for(let i=0;i<batch.length;i++){const target=rewards[i]+this.gamma*mNQ[i]*(1-dones[i]);tQV.arraySync()[i][actions[i]]=target}const cLr=this.lrS(this.steps);this.opt.learningRate=cLr;await this.qN.fit(sT,tQV,{epochs:1,batchSize:this.batchSize});sT.dispose();nST.dispose();if(this.temp>.01){this.temp*=this.tempDR}if(this.steps%this.utF===0){this.tN.setWeights(this.qN.getWeights())}this.steps++}sB(){const bS=Math.min(this.mem.length,this.batchSize);const batch=[];for(let i=0;i<bS;i++){const index=Math.floor(Math.random()*this.mem.length);batch.push(this.mem[index])}return batch}getEpsilon(){return this.temp}}
